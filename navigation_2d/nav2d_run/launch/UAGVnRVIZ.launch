<launch>
	<!-- Debug simulation -->
	<param name="use_sim_time" value="false" />

	<node name="ToArduino" pkg="rosserial_python" type="serial_node.py" output="screen" />
	
	<!-- ====== Start SICK LIDAR ====== -->
  	<param name="robot_description" command="$(find xacro)/xacro.py '$(find sick_tim)/urdf/example.urdf.xacro'" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

	<node name="sick_tim571_2050101" pkg="sick_tim" type="sick_tim551_2050001" respawn="false" output="screen">
    		<!-- default values: -->
		<param name="min_ang" type="double" value="-2.3" />
		<param name="max_ang" type="double" value="2.3" />
		<param name="update_rate" type="double" value="20.0" />
	    	<!--
		<param name="intensity" type="bool" value="True" />
		<param name="skip" type="int" value="0" />
		<param name="frame_id" type="str" value="laser" />
		<param name="time_offset" type="double" value="-0.001" />
		<param name="publish_datagram" type="bool" value="False" />
		<param name="subscribe_datagram" type="bool" value="false" />
		<param name="device_number" type="int" value="0" />
		-->
		<param name="range_min" type="double" value="0.002" />
		<param name="range_max" type="double" value="30.0" />
	
		<!-- Older versions of the scanner firmware report an incorrect time_increment.
	        	If you get a warning about time_increment, uncomment this. -->
		<!--param name="time_increment" type="double" value="0.000061722" /-->
	
		<!-- Uncomment this to enable TCP instead of USB connection; 'hostname' is the host name or IP address of the laser scanner
			In cases where a race condition exists and the computer boots up before the TIM is ready, increase 'timelimit.'
		-->
	        <param name="hostname" type="string" value="192.168.0.2" />
        	<param name="port" type="string" value="2112" />
	        <param name="timelimit" type="int" value="5" />
	</node>
	<!-- ================================ -->

	<!-- Custmized setting -->
	<node name="fix_tf_tree" pkg="tf" type="static_transform_publisher" args="0.2815 0 0.15 0 0 0 1 base_link laser_link 100" />

	<!-- Some general parameters -->
	<rosparam file="$(find nav2d_run)/param/ros.yaml"/>

	<!-- Start the TFpub to publish the TF info -->
	<node name="TFpub" pkg="nav2d_tfpub" type="tfpub" />
	//mOdom.child_frame_id  = "base_link";

	<!-- Start the Operator to control the simulated robot -->
	<node name="Operator" pkg="nav2d_operator" type="operator" >
		<rosparam file="$(find nav2d_run)/param/operator.yaml"/>
		<rosparam file="$(find nav2d_run)/param/costmap.yaml" ns="local_map" />
	</node>	

	<!-- Start Mapper to genreate map from laser scans -->
	<node name="Mapper" pkg="nav2d_karto" type="mapper">
		<remap from="base_scan" to="scan"/>
		<rosparam file="$(find nav2d_run)/param/mapper.yaml"/>
	</node>

	<!-- Start the Navigator to move the robot autonomously -->
	<node name="Navigator" pkg="nav2d_navigator" type="navigator">
		<rosparam file="$(find nav2d_run)/param/navigator.yaml"/>
	</node>

	<node name="GetMap" pkg="nav2d_navigator" type="get_map_client" />
	<node name="Explore" pkg="nav2d_navigator" type="explore_client" />
	<node name="Registration" pkg="nav2d_navigator" type="registration_client" />
	<node name="SetGoal" pkg="nav2d_navigator" type="set_goal_client">
		
	</node>


	<!-- Start the joystick-driver and remote-controller for operation-->
	<node name="Joystick" pkg="joy" type="joy_node" />
	<node name="Remote" pkg="nav2d_remote" type="remote_joy" />

	<!-- RVIZ to view the visualization -->
	<node name="RVIZ" pkg="rviz" type="rviz" args=" -d $(find nav2d_run)/param/UAGV.rviz" />
 
	
</launch>
